{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Guide for Setting Up an Ubuntu Flavour Machine for Quantitative Marketing & Economics Research These pages document what I need to do when setting up a new Ubuntu machine for my research workflow. I most recently did this for PopOS 20.04 in June 2020. Summary If everything goes smoothly, you should be able to complete the installation in one sitting which should take about 2-3 hours. Follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, feel free to contact me . As much as possible, I've tried to do everything from the terminal so its easy to replicate.","title":"Welcome"},{"location":"#installation-guide-for-setting-up-an-ubuntu-flavour-machine-for-quantitative-marketing-economics-research","text":"These pages document what I need to do when setting up a new Ubuntu machine for my research workflow. I most recently did this for PopOS 20.04 in June 2020. Summary If everything goes smoothly, you should be able to complete the installation in one sitting which should take about 2-3 hours. Follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, feel free to contact me . As much as possible, I've tried to do everything from the terminal so its easy to replicate.","title":"Installation Guide for Setting Up an Ubuntu Flavour Machine for Quantitative Marketing &amp; Economics Research"},{"location":"NEWS/","text":"News Version 0.2.1 (10 June 2020) Docker without sudo prefix Version 0.2.0 (3 June 2020) Add Docker installation Version 0.1.0 (18 Feb 2020) First complete version","title":"News"},{"location":"NEWS/#news","text":"Version 0.2.1 (10 June 2020) Docker without sudo prefix Version 0.2.0 (3 June 2020) Add Docker installation Version 0.1.0 (18 Feb 2020) First complete version","title":"News"},{"location":"acknowledgement/","text":"Acknowledgements This installation guide borrows heavily from some of my previous work putting together installation guides for courses run under the Programming Practices for Research in Economics curricula. In particular, I have drawn heavily on: Ulrich Bergman, Matteo Courthoud & Deer, Lachlan, 2020, Installation Guide , Programming Practices for Research in Economics: Foundations, University of Zurich. Deer, Lachlan & Julian Langer, 2019, Installation Guide , Programming Practices for Research in Economics: Foundations, University of Zurich. Deer, Lachlan, Adrian Etter, Julian Langer & Max Winkler, 2017, Installation Guide , Programming Practices for Economics Research, University of Zurich. License Material is licensed under a CC-BY-SA-4.0 license. Suggested Citation Lachlan Deer, 2020, Installation Guide for Setting Up an Ubuntu Flavored Machine for Quantitative Marketing & Economics Research.","title":"Acknowledgements"},{"location":"acknowledgement/#acknowledgements","text":"This installation guide borrows heavily from some of my previous work putting together installation guides for courses run under the Programming Practices for Research in Economics curricula. In particular, I have drawn heavily on: Ulrich Bergman, Matteo Courthoud & Deer, Lachlan, 2020, Installation Guide , Programming Practices for Research in Economics: Foundations, University of Zurich. Deer, Lachlan & Julian Langer, 2019, Installation Guide , Programming Practices for Research in Economics: Foundations, University of Zurich. Deer, Lachlan, Adrian Etter, Julian Langer & Max Winkler, 2017, Installation Guide , Programming Practices for Economics Research, University of Zurich.","title":"Acknowledgements"},{"location":"acknowledgement/#license","text":"Material is licensed under a CC-BY-SA-4.0 license.","title":"License"},{"location":"acknowledgement/#suggested-citation","text":"Lachlan Deer, 2020, Installation Guide for Setting Up an Ubuntu Flavored Machine for Quantitative Marketing & Economics Research.","title":"Suggested Citation"},{"location":"contact/","text":"Contact Me Questions or Comments? I look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it. Preferred contact method: Post an issue on our GitHub page Or Contact me via email: lachlan \"DOT\" deer \"AT\" gmail \"DOT\" com with the title \"Installation Guide\"","title":"Contact"},{"location":"contact/#contact-me","text":"","title":"Contact Me"},{"location":"contact/#questions-or-comments","text":"I look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it. Preferred contact method: Post an issue on our GitHub page Or Contact me via email: lachlan \"DOT\" deer \"AT\" gmail \"DOT\" com with the title \"Installation Guide\"","title":"Questions or Comments?"},{"location":"docker/","text":"Docker Two step process: Set up the Docker repository Install and update Docker from the repository. Set up repository Update the apt package index and install packages to allow apt to use a repository over HTTPS: $ sudo apt-get update $ sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common Likely all of the above is already installed. Add Docker\u2019s official GPG key: $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint. $ sudo apt-key fingerprint 0EBFCD88 pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ unknown] Docker Release (CE deb) <docker@docker.com> sub rsa4096 2017-02-22 [S] Now add the repository: $ sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" Install Docker Engine Update the apt package index, and install the latest version of Docker Engine and containerd $ sudo apt-get update $ sudo apt-get install docker-ce docker-ce-cli containerd.io Verify Installation: $ sudo docker run hello-world Run Docker without sudo As installed above all Docker commands need to be prefixed with sudo . Let's change this as follows: Create a group, call it docker. $ sudo groupadd docker Add your user to the docker group. $ sudo usermod -aG docker $USER Run the following command to activate the changes to groups: $ newgrp docker Verify that you can run docker commands without sudo. $ docker run hello-world","title":"Docker"},{"location":"docker/#docker","text":"Two step process: Set up the Docker repository Install and update Docker from the repository.","title":"Docker"},{"location":"docker/#set-up-repository","text":"Update the apt package index and install packages to allow apt to use a repository over HTTPS: $ sudo apt-get update $ sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common Likely all of the above is already installed. Add Docker\u2019s official GPG key: $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint. $ sudo apt-key fingerprint 0EBFCD88 pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 uid [ unknown] Docker Release (CE deb) <docker@docker.com> sub rsa4096 2017-02-22 [S] Now add the repository: $ sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\"","title":"Set up repository"},{"location":"docker/#install-docker-engine","text":"Update the apt package index, and install the latest version of Docker Engine and containerd $ sudo apt-get update $ sudo apt-get install docker-ce docker-ce-cli containerd.io","title":"Install Docker Engine"},{"location":"docker/#verify-installation","text":"$ sudo docker run hello-world","title":"Verify Installation:"},{"location":"docker/#run-docker-without-sudo","text":"As installed above all Docker commands need to be prefixed with sudo . Let's change this as follows: Create a group, call it docker. $ sudo groupadd docker Add your user to the docker group. $ sudo usermod -aG docker $USER Run the following command to activate the changes to groups: $ newgrp docker Verify that you can run docker commands without sudo. $ docker run hello-world","title":"Run Docker without sudo"},{"location":"gis-tools/","text":"","title":"Gis tools"},{"location":"git/","text":"Git Git is my go to version control system. It's usually installed on Ubuntu when you install the OS. The last time I did this though, it was not. Install it: sudo apt-get install git Verify Your Install: git --version with the output: git version 2.20.1 The exact version will likely evolve over time. Basic Set Up To use Git we need to have some basic configuration set up. If we forget to do this, the first time we try and commit something we will be prompted for it. $ git config --global user.name \"FirstName LastName\" $ git config --global user.email \"something@domain.somethingelse\" In addition, instead of Git opening Vim when it wants further information, I prefer it to open nano: $ git config --global core.editor \"nano -w\" And to handle line endings in a way that Windows can also deal with (this is totally optional): $ git config --global core.autocrlf input Introductions to Git / Where to look for help: Software Carpentry's Version Control with Git PP4RS' Introduction to Git","title":"Git"},{"location":"git/#git","text":"Git is my go to version control system. It's usually installed on Ubuntu when you install the OS. The last time I did this though, it was not. Install it: sudo apt-get install git","title":"Git"},{"location":"git/#verify-your-install","text":"git --version with the output: git version 2.20.1 The exact version will likely evolve over time.","title":"Verify Your Install:"},{"location":"git/#basic-set-up","text":"To use Git we need to have some basic configuration set up. If we forget to do this, the first time we try and commit something we will be prompted for it. $ git config --global user.name \"FirstName LastName\" $ git config --global user.email \"something@domain.somethingelse\" In addition, instead of Git opening Vim when it wants further information, I prefer it to open nano: $ git config --global core.editor \"nano -w\" And to handle line endings in a way that Windows can also deal with (this is totally optional): $ git config --global core.autocrlf input","title":"Basic Set Up"},{"location":"git/#introductions-to-git-where-to-look-for-help","text":"Software Carpentry's Version Control with Git PP4RS' Introduction to Git","title":"Introductions to Git / Where to look for help:"},{"location":"julia/","text":"Julia Downloading Julia Go to the Julia Downloads page and download the latest stable release. Once downloaded, extract the contents of the zip file to a location we want to store the files. In my case that is ~/julia . Command Line Access To make the version of Julia you just downloaded and extracted available from the command line, we will want to export the path in our .bashrc file. Let's do this by adding the following lines to the end of the .bashrc file: # julia export PATH=${PATH}:$HOME/julia/julia-1.3.0/bin Notice that the path uses the location where I decided to store the julia files. After saving and closing the .bashrc file, to activate the changes in our current terminal window: source .bashrc Verifying Julia Install Enter the following into the command line: julia --version which should yield the following julia version 1.3.0","title":"Julia"},{"location":"julia/#julia","text":"","title":"Julia"},{"location":"julia/#downloading-julia","text":"Go to the Julia Downloads page and download the latest stable release. Once downloaded, extract the contents of the zip file to a location we want to store the files. In my case that is ~/julia .","title":"Downloading Julia"},{"location":"julia/#command-line-access","text":"To make the version of Julia you just downloaded and extracted available from the command line, we will want to export the path in our .bashrc file. Let's do this by adding the following lines to the end of the .bashrc file: # julia export PATH=${PATH}:$HOME/julia/julia-1.3.0/bin Notice that the path uses the location where I decided to store the julia files. After saving and closing the .bashrc file, to activate the changes in our current terminal window: source .bashrc","title":"Command Line Access"},{"location":"julia/#verifying-julia-install","text":"Enter the following into the command line: julia --version which should yield the following julia version 1.3.0","title":"Verifying Julia Install"},{"location":"misc/","text":"Miscellany This page stores some relatively random extra things that I install (or want to uninstall). It's much less thought out. Stuff to Install from the Ubuntu Sofware Centre Spotify Google Chrome Gimp Skype Other Stuff to Install Dropbox Either go here , point and click; or Do it from the command line: cd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86_64\" | tar xzf - ~/.dropbox-dist/dropboxd Foxit PDF Reader Go here and download Foxit reader. Once downloaded double click to launch the install. Warning I have nonstop issues at the moment with Foxit freezing on Ubuntu 19.10. Switched to Okular to basix pdf viewing Slack sudo snap install slack --classic Updating Slack (sometimes they force it on you): sudo apt-get update sudo apt-get upgrade slack-desktop Uninstalling Dropbox from the Command Line Sometimes one wants to remove Dropbox from the command line. Follow this recipe to remove the app: dropbox stop dropbox status # Should report \"not running\" rm -rf ~/.dropbox-dist rm -rf /var/lib/dropbox rm -rf ~/.dropbox* sudo apt-get remove nautilus-dropbox sudo apt-get remove dropbox rm /etc/apt/source.d/dropbox The above does not remove the files in your system. If you want to do that: rm -rv ~/Dropbox","title":"Miscellany"},{"location":"misc/#miscellany","text":"This page stores some relatively random extra things that I install (or want to uninstall). It's much less thought out.","title":"Miscellany"},{"location":"misc/#stuff-to-install-from-the-ubuntu-sofware-centre","text":"Spotify Google Chrome Gimp Skype","title":"Stuff to Install from the Ubuntu Sofware Centre"},{"location":"misc/#other-stuff-to-install","text":"","title":"Other Stuff to Install"},{"location":"misc/#dropbox","text":"Either go here , point and click; or Do it from the command line: cd ~ && wget -O - \"https://www.dropbox.com/download?plat=lnx.x86_64\" | tar xzf - ~/.dropbox-dist/dropboxd","title":"Dropbox"},{"location":"misc/#foxit-pdf-reader","text":"Go here and download Foxit reader. Once downloaded double click to launch the install. Warning I have nonstop issues at the moment with Foxit freezing on Ubuntu 19.10. Switched to Okular to basix pdf viewing","title":"Foxit PDF Reader"},{"location":"misc/#slack","text":"sudo snap install slack --classic Updating Slack (sometimes they force it on you): sudo apt-get update sudo apt-get upgrade slack-desktop","title":"Slack"},{"location":"misc/#uninstalling-dropbox-from-the-command-line","text":"Sometimes one wants to remove Dropbox from the command line. Follow this recipe to remove the app: dropbox stop dropbox status # Should report \"not running\" rm -rf ~/.dropbox-dist rm -rf /var/lib/dropbox rm -rf ~/.dropbox* sudo apt-get remove nautilus-dropbox sudo apt-get remove dropbox rm /etc/apt/source.d/dropbox The above does not remove the files in your system. If you want to do that: rm -rv ~/Dropbox","title":"Uninstalling Dropbox from the Command Line"},{"location":"pandoc/","text":"Pandoc Pandoc is the swiss-army knife of markup format conversions. Download Pandoc from here . Then install as you usually would. Verify Your Install pandoc --version yields: pandoc 2.2.3.2 Compiled with pandoc-types 1.17.5.1, texmath 0.11.0.1, skylighting 0.7.2 Default user data directory: /home/lachlan/.pandoc Copyright (C) 2006-2018 John MacFarlane Web: http://pandoc.org This is free software; see the source for copying conditions. There is no warranty, not even for merchantability or fitness for a particular purpose.","title":"Pandoc"},{"location":"pandoc/#pandoc","text":"Pandoc is the swiss-army knife of markup format conversions. Download Pandoc from here . Then install as you usually would.","title":"Pandoc"},{"location":"pandoc/#verify-your-install","text":"pandoc --version yields: pandoc 2.2.3.2 Compiled with pandoc-types 1.17.5.1, texmath 0.11.0.1, skylighting 0.7.2 Default user data directory: /home/lachlan/.pandoc Copyright (C) 2006-2018 John MacFarlane Web: http://pandoc.org This is free software; see the source for copying conditions. There is no warranty, not even for merchantability or fitness for a particular purpose.","title":"Verify Your Install"},{"location":"python/","text":"Anaconda Python Anaconda is a pre-packaged Python distribution for scientific users. Unlike other Python distributions, this means that most additional functionality that we need to do numerical computing, statistics, plotting and the like come already installed - which saves us a lot of time. First, we need to download the Anaconda Bash Script (a file that will install things for us). Enter the following into the terminal: curl -O https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh Run the Anaconda Script by entering the following into the terminal: bash Anaconda3-2019.10-Linux-x86_64.sh As this script runs through, review and accept the license agreement. To do this press Return until you reach the end, and type 'yes'. After you agree to the license, you will be prompted to choose the location of the installation: Anaconda3 will now be installed into this location: /home/lachlan/anaconda3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [/home/lachlan/anaconda3] >>> Use the default. The installation will continue - it does take some time, so be patient. Once the installation is complete, you will get the following output: ... installation finished. Do you wish the installer to prepend the Anaconda3 install location to PATH in your /home/lachlan/.bashrc ? [yes|no] >>> Type 'yes'. Now we need to refresh our terminal settings, so type the following and press return: source ~/.bashrc Now proceed to verify your install . Updating the Anaconda Install In the future, if you want to find the most up to date Anaconda installer, go to the following website: https://repo.anaconda.com/archive/ and find the most recent Anaconda3 installer for Linux-x86_64 Verify Installation To verify that the correct version of Python has been installed, usually we would follow the programName --version logic from before: python --version which yields: Python 3.7.4 which tells us that Python is installed. But, because most operating systems these days have some version of Python installed, this doesn't guarantee that the Anaconda version is available for us to use from the terminal. To check, initiate Python by entering the following into a terminal and pressing Return : python You should now see something like: Python 3.7.4 (default, Aug 13 2019, 20:35:49) [GCC 7.3.0] :: Anaconda, Inc. on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. where the operating system name should be different for Mac users. Now we see that the terminal is using the Anaconda version as we wanted. To quit the Python session we just opened, type the following at the >>> : >>> quit() and you will return to your terminal. This was successful if you now see a $ rather than the >>> . Anacondas Default Environment You will now notice there is a (base) sitting at the beginning of your terminal prompt: bash (base) lachlan@lachlan-x1:~$ This is because by using Anaconda as our default Python install it is using it's own virtual environment, called 'base'. We may want to turn this off. To do it (permanently): Create a new file .condarc in your home directory. Put the following line into it: auto_activate_base: false Close the file and source it If you ever want it turned back on: conda activate base does the job in an individual terminal session. Turn it off with conda deactivate . Python 2 vs Python 3 Python 2 and 3 are incompatible in syntax. If you had Python 2 previously installed on your machine, you might have seen Python 2.x.x above. In that case try typing python3 --version instead. Now you should see a message like the one above and are good to go for the course. Virtual Environment Wrapper I use the Virtual Environment Wrapper package to control my virtual environments. It's installed via pip: pip install virtualenvwrapper Now we open our .bashrc and enter the following info: export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export VIRTUALENVWRAPPER_VIRTUALENV=/usr/bin/virtualenv export WORKON_HOME=$HOME/.virtualenvs export PROJECT_HOME=$HOME/Devel source $HOME/.local/bin/virtualenvwrapper.sh Close and source the .bashrc and we are ready to use it. Other Useful Python Libraries Install via pip mkdocs mkdocs-material pymdown-extensions linearmodels","title":"Python"},{"location":"python/#anaconda-python","text":"Anaconda is a pre-packaged Python distribution for scientific users. Unlike other Python distributions, this means that most additional functionality that we need to do numerical computing, statistics, plotting and the like come already installed - which saves us a lot of time. First, we need to download the Anaconda Bash Script (a file that will install things for us). Enter the following into the terminal: curl -O https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh Run the Anaconda Script by entering the following into the terminal: bash Anaconda3-2019.10-Linux-x86_64.sh As this script runs through, review and accept the license agreement. To do this press Return until you reach the end, and type 'yes'. After you agree to the license, you will be prompted to choose the location of the installation: Anaconda3 will now be installed into this location: /home/lachlan/anaconda3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [/home/lachlan/anaconda3] >>> Use the default. The installation will continue - it does take some time, so be patient. Once the installation is complete, you will get the following output: ... installation finished. Do you wish the installer to prepend the Anaconda3 install location to PATH in your /home/lachlan/.bashrc ? [yes|no] >>> Type 'yes'. Now we need to refresh our terminal settings, so type the following and press return: source ~/.bashrc Now proceed to verify your install . Updating the Anaconda Install In the future, if you want to find the most up to date Anaconda installer, go to the following website: https://repo.anaconda.com/archive/ and find the most recent Anaconda3 installer for Linux-x86_64","title":"Anaconda Python"},{"location":"python/#verify-installation","text":"To verify that the correct version of Python has been installed, usually we would follow the programName --version logic from before: python --version which yields: Python 3.7.4 which tells us that Python is installed. But, because most operating systems these days have some version of Python installed, this doesn't guarantee that the Anaconda version is available for us to use from the terminal. To check, initiate Python by entering the following into a terminal and pressing Return : python You should now see something like: Python 3.7.4 (default, Aug 13 2019, 20:35:49) [GCC 7.3.0] :: Anaconda, Inc. on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. where the operating system name should be different for Mac users. Now we see that the terminal is using the Anaconda version as we wanted. To quit the Python session we just opened, type the following at the >>> : >>> quit() and you will return to your terminal. This was successful if you now see a $ rather than the >>> . Anacondas Default Environment You will now notice there is a (base) sitting at the beginning of your terminal prompt: bash (base) lachlan@lachlan-x1:~$ This is because by using Anaconda as our default Python install it is using it's own virtual environment, called 'base'. We may want to turn this off. To do it (permanently): Create a new file .condarc in your home directory. Put the following line into it: auto_activate_base: false Close the file and source it If you ever want it turned back on: conda activate base does the job in an individual terminal session. Turn it off with conda deactivate . Python 2 vs Python 3 Python 2 and 3 are incompatible in syntax. If you had Python 2 previously installed on your machine, you might have seen Python 2.x.x above. In that case try typing python3 --version instead. Now you should see a message like the one above and are good to go for the course.","title":"Verify Installation"},{"location":"python/#virtual-environment-wrapper","text":"I use the Virtual Environment Wrapper package to control my virtual environments. It's installed via pip: pip install virtualenvwrapper Now we open our .bashrc and enter the following info: export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 export VIRTUALENVWRAPPER_VIRTUALENV=/usr/bin/virtualenv export WORKON_HOME=$HOME/.virtualenvs export PROJECT_HOME=$HOME/Devel source $HOME/.local/bin/virtualenvwrapper.sh Close and source the .bashrc and we are ready to use it.","title":"Virtual Environment Wrapper"},{"location":"python/#other-useful-python-libraries","text":"Install via pip mkdocs mkdocs-material pymdown-extensions linearmodels","title":"Other Useful Python Libraries"},{"location":"r/","text":"R Install R We can install R as follows: apt-get install r-base r-base-dev Verify R Install R --version which yields: R version 3.6.1 (2019-07-05) -- \"Action of the Toes\" Copyright (C) 2019 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see https://www.gnu.org/licenses/. OpenBlas support One may want to have the automatically the multi-threaded OpenBlas library installed in order to get higher performance for linear algebra operations: apt-get install libopenblas-base RStudio RStudio is a GUI for R . Install by downloading from the website and then installing via the Ubuntu software installer. R Packages Here's my basic set of packages that I install so that I can do most of what I want straight off the bat: Via the install.packages command in R: to_install <-c( \"reshape\", \"rmarkdown\", \"plm\", \"Hmisc\", \"sandwich\", \"Ecdat\", \"stargazer\", \"knitr\", \"httr\", \"rvest\", \"xml2\", \"xtable\",\"tidyverse\", \"AER\", \"rdd\", \"car\", \"aod\", \"lmtest\", \"lfe\", \"nlme\", \"lme4\", \"erer\", \"margins\", \"multiwayvcov\" \"lubridate\", \"haven\", \"rddensity\", \"rdrobust\", \"ivpack\", \"readxl\", \"ggrepel\", \"multiwayvcov\", \"RSQLite\", \"dbplyr\", \"devtools\", \"blogdown\", \"rticles\", \"packrat\", \"here\", \"optparse\", \"rlist\" ) install.packages(to_install) Note that many dependencies get installed along the way. I also want some packages to be installed from Github - these typically arent on CRAN yet: from_gh <- c(\"ddsjoberg/gtsummary\", \"vincentarelbundock/modelsummary\", \"rstudio/fontawesome\", \"rstudio/gt\", \"rstudio/renv\" ) devtools::install_github(from_gh)","title":"R"},{"location":"r/#r","text":"","title":"R"},{"location":"r/#install-r","text":"We can install R as follows: apt-get install r-base r-base-dev","title":"Install R"},{"location":"r/#verify-r-install","text":"R --version which yields: R version 3.6.1 (2019-07-05) -- \"Action of the Toes\" Copyright (C) 2019 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit) R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see https://www.gnu.org/licenses/.","title":"Verify R Install"},{"location":"r/#openblas-support","text":"One may want to have the automatically the multi-threaded OpenBlas library installed in order to get higher performance for linear algebra operations: apt-get install libopenblas-base","title":"OpenBlas support"},{"location":"r/#rstudio","text":"RStudio is a GUI for R . Install by downloading from the website and then installing via the Ubuntu software installer.","title":"RStudio"},{"location":"r/#r-packages","text":"Here's my basic set of packages that I install so that I can do most of what I want straight off the bat: Via the install.packages command in R: to_install <-c( \"reshape\", \"rmarkdown\", \"plm\", \"Hmisc\", \"sandwich\", \"Ecdat\", \"stargazer\", \"knitr\", \"httr\", \"rvest\", \"xml2\", \"xtable\",\"tidyverse\", \"AER\", \"rdd\", \"car\", \"aod\", \"lmtest\", \"lfe\", \"nlme\", \"lme4\", \"erer\", \"margins\", \"multiwayvcov\" \"lubridate\", \"haven\", \"rddensity\", \"rdrobust\", \"ivpack\", \"readxl\", \"ggrepel\", \"multiwayvcov\", \"RSQLite\", \"dbplyr\", \"devtools\", \"blogdown\", \"rticles\", \"packrat\", \"here\", \"optparse\", \"rlist\" ) install.packages(to_install) Note that many dependencies get installed along the way. I also want some packages to be installed from Github - these typically arent on CRAN yet: from_gh <- c(\"ddsjoberg/gtsummary\", \"vincentarelbundock/modelsummary\", \"rstudio/fontawesome\", \"rstudio/gt\", \"rstudio/renv\" ) devtools::install_github(from_gh)","title":"R Packages"},{"location":"snakemake/","text":"Snakemake Snakemake is my default workflow manager right now. Think of it like make - but designed for for the kind or work we actually do . It's a Python library, so install via pip: pip install snakemake Verify Install snakemake --version which gives: 5.8.1 Warning Notice that the Snakemake developers release new versions very frequently - and there can be breaking changes. Thus sometimes we may want a specific version installed. In this case, for example: pip install snakemake==5.4.3 installs version 5.4.3 and uninstalls any existing version in the current environment.","title":"Snakemake"},{"location":"snakemake/#snakemake","text":"Snakemake is my default workflow manager right now. Think of it like make - but designed for for the kind or work we actually do . It's a Python library, so install via pip: pip install snakemake","title":"Snakemake"},{"location":"snakemake/#verify-install","text":"snakemake --version which gives: 5.8.1 Warning Notice that the Snakemake developers release new versions very frequently - and there can be breaking changes. Thus sometimes we may want a specific version installed. In this case, for example: pip install snakemake==5.4.3 installs version 5.4.3 and uninstalls any existing version in the current environment.","title":"Verify Install"},{"location":"ssh/","text":"Setting Up SSH Keys SSH Keys make logging into servers and the like simpler since we don't need passwords. Let's create a new one for the machine Creating a SSH Key In the terminal type: ssh-keygen Usually I don't create a passphrase or give the file a custom name, so it ends up as id_rsa Copying the SSH Key to Servers Now we want the copy the public part of our SSH key to the servers one logs into. Do this as follows: ssh-copy-id -i ~/.ssh/id_rsa.pub user@host You will be prompted for the passcode to log into the server when you do this. Once this works, we want to check that you can now log in using the ssh key: ssh user@host which should take you to the terminal of the server you logged in to. Automated Login to Server with Terminal Profiles One can create 'Profiles' on their own terminal so automate the login to a server to a simple point-and-click. Here's how: Open a terminal window Go to the menu bar and click 'Preferences' to open up a menu window Click the + Next to the Profiles menu Name your profile something useful In that profile go to 'Command' Select the 'Run command as login shell' and 'Run custom command instead of my shell' In the custom command box add the ssh command ssh user@host Close the Preferences menus Now when you click the down-arrow you should get a choice of which terminal you want to open. If you click on the profile you just created you should be able to ssh into your server (provided any required VPN is on). Add to GitHub We also want to add the new ssh key to our github account so we can clone, push and pull using the SSH key rather than entering our username and password each time. Proceed as follows: Log in to your GitHub profile Go to Settings Go to 'SSH and GPG Keys' Click 'New SSH Key' Give the new key a name and copy across the contents of the public part of your key created above.","title":"SSH Keys"},{"location":"ssh/#setting-up-ssh-keys","text":"SSH Keys make logging into servers and the like simpler since we don't need passwords. Let's create a new one for the machine","title":"Setting Up SSH Keys"},{"location":"ssh/#creating-a-ssh-key","text":"In the terminal type: ssh-keygen Usually I don't create a passphrase or give the file a custom name, so it ends up as id_rsa","title":"Creating a SSH Key"},{"location":"ssh/#copying-the-ssh-key-to-servers","text":"Now we want the copy the public part of our SSH key to the servers one logs into. Do this as follows: ssh-copy-id -i ~/.ssh/id_rsa.pub user@host You will be prompted for the passcode to log into the server when you do this. Once this works, we want to check that you can now log in using the ssh key: ssh user@host which should take you to the terminal of the server you logged in to.","title":"Copying the SSH Key to Servers"},{"location":"ssh/#automated-login-to-server-with-terminal-profiles","text":"One can create 'Profiles' on their own terminal so automate the login to a server to a simple point-and-click. Here's how: Open a terminal window Go to the menu bar and click 'Preferences' to open up a menu window Click the + Next to the Profiles menu Name your profile something useful In that profile go to 'Command' Select the 'Run command as login shell' and 'Run custom command instead of my shell' In the custom command box add the ssh command ssh user@host Close the Preferences menus Now when you click the down-arrow you should get a choice of which terminal you want to open. If you click on the profile you just created you should be able to ssh into your server (provided any required VPN is on).","title":"Automated Login to Server with Terminal Profiles"},{"location":"ssh/#add-to-github","text":"We also want to add the new ssh key to our github account so we can clone, push and pull using the SSH key rather than entering our username and password each time. Proceed as follows: Log in to your GitHub profile Go to Settings Go to 'SSH and GPG Keys' Click 'New SSH Key' Give the new key a name and copy across the contents of the public part of your key created above.","title":"Add to GitHub"},{"location":"tex/","text":"LaTeX Ultimately we all write in TeX. To install TeX with all the bells and whistles: sudo apt-get install texlive-full This installation is quite large, and installs tonnes of stuff I don't use, including language packs. If you are a light tex user, this one probably suffices: sudo apt-get install texlive-latex-extra I tried this one, but fontawesome wasn't included (at least this was the first issue I had) - so I had to go the full install in the end. Verify Your Install: Check everything goes according to plan: tex --version which gives the following output: TeX 3.14159265 (TeX Live 2019/Debian) kpathsea version 6.3.1 Copyright 2019 D.E. Knuth. There is NO warranty. Redistribution of this software is covered by the terms of both the TeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the TeX source. Primary author of TeX: D.E. Knuth. The version numbers might differ as we progress in time.","title":"LaTeX"},{"location":"tex/#latex","text":"Ultimately we all write in TeX. To install TeX with all the bells and whistles: sudo apt-get install texlive-full This installation is quite large, and installs tonnes of stuff I don't use, including language packs. If you are a light tex user, this one probably suffices: sudo apt-get install texlive-latex-extra I tried this one, but fontawesome wasn't included (at least this was the first issue I had) - so I had to go the full install in the end.","title":"LaTeX"},{"location":"tex/#verify-your-install","text":"Check everything goes according to plan: tex --version which gives the following output: TeX 3.14159265 (TeX Live 2019/Debian) kpathsea version 6.3.1 Copyright 2019 D.E. Knuth. There is NO warranty. Redistribution of this software is covered by the terms of both the TeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the TeX source. Primary author of TeX: D.E. Knuth. The version numbers might differ as we progress in time.","title":"Verify Your Install:"},{"location":"text-editor/","text":"Text Editors Here are two alternatives: VS Code - which I am currently using / transitioning towards Atom - what I used to use, and still feel attached to VS Code sudo snap install --classic code # or code-insiders Verifying VS Code Install code --version yields something like: 1.41.0 9579eda04fdb3a9bba2750f15193e5fafe16b959 x64 Extra VS Code packages Here's what I am running at the moment: Nord Wave (color theme) Bracket Pair Colorizer 2 Code Spell Checker Git Graph Git History Julia Julia Formatter LaTeX Workshop Markdown All in One Markdown PDF Markdown Preview Enhanced markdownlint Python R r-check TODO Highlight vscode-icons vscode-pdf Whitespacer YAML Atom Enter the following information to add a repository that has the Atom installation, then press Return: wget -qO - https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add - sudo sh -c 'echo \"deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main\" > /etc/apt/sources.list.d/atom.list' sudo apt-get update Install Atom by entering the following commands into a terminal and then pressing Return: sudo apt-get install atom Verifying Atom Installation We want Atom to be available from the command line. Then open your terminal and type the following into the command line: atom --version followed by pressing Return you should see output like the following Atom : 1.44.0 Electron: 4.2.7 Chrome : 69.0.3497.128 Node : 10.11.0 But expect the version numbers to have changed Extra Atom Packages Here's a non-exhaustive list of packages I typically add to Atom: autocomplete-R autocomplete-python (choose Jedi as your engine when asked) autoflow language-r linter linter-lintr tablr platformio-ide-terminal project-plus language-markdown markdown-table-editor markdown-preview-plus autocomplete-citeproc open-unsupported-files advanced-open-file language-latex atom-latex whitespace","title":"Text Editor"},{"location":"text-editor/#text-editors","text":"Here are two alternatives: VS Code - which I am currently using / transitioning towards Atom - what I used to use, and still feel attached to","title":"Text Editors"},{"location":"text-editor/#vs-code","text":"sudo snap install --classic code # or code-insiders","title":"VS Code"},{"location":"text-editor/#verifying-vs-code-install","text":"code --version yields something like: 1.41.0 9579eda04fdb3a9bba2750f15193e5fafe16b959 x64","title":"Verifying VS Code Install"},{"location":"text-editor/#extra-vs-code-packages","text":"Here's what I am running at the moment: Nord Wave (color theme) Bracket Pair Colorizer 2 Code Spell Checker Git Graph Git History Julia Julia Formatter LaTeX Workshop Markdown All in One Markdown PDF Markdown Preview Enhanced markdownlint Python R r-check TODO Highlight vscode-icons vscode-pdf Whitespacer YAML","title":"Extra VS Code packages"},{"location":"text-editor/#atom","text":"Enter the following information to add a repository that has the Atom installation, then press Return: wget -qO - https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add - sudo sh -c 'echo \"deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main\" > /etc/apt/sources.list.d/atom.list' sudo apt-get update Install Atom by entering the following commands into a terminal and then pressing Return: sudo apt-get install atom","title":"Atom"},{"location":"text-editor/#verifying-atom-installation","text":"We want Atom to be available from the command line. Then open your terminal and type the following into the command line: atom --version followed by pressing Return you should see output like the following Atom : 1.44.0 Electron: 4.2.7 Chrome : 69.0.3497.128 Node : 10.11.0 But expect the version numbers to have changed","title":"Verifying Atom Installation"},{"location":"text-editor/#extra-atom-packages","text":"Here's a non-exhaustive list of packages I typically add to Atom: autocomplete-R autocomplete-python (choose Jedi as your engine when asked) autoflow language-r linter linter-lintr tablr platformio-ide-terminal project-plus language-markdown markdown-table-editor markdown-preview-plus autocomplete-citeproc open-unsupported-files advanced-open-file language-latex atom-latex whitespace","title":"Extra Atom Packages"},{"location":"ubuntu-essentials/","text":"Ubuntu Packages We need some extra packages added to make sure that everything we will want to do in the following pages runs smoothly. Enter the following into the command line. sudo apt-get install libudunits2-dev libfontconfig1-dev libcairo2-dev \\ libcurl4-gnutls-dev librtmp-dev openssl \\ libxml2-dev libssl-dev fonts-font-awesome \\ gcc gcc-dev","title":"Ubuntu Packages - Essentials"},{"location":"ubuntu-essentials/#ubuntu-packages","text":"We need some extra packages added to make sure that everything we will want to do in the following pages runs smoothly. Enter the following into the command line. sudo apt-get install libudunits2-dev libfontconfig1-dev libcairo2-dev \\ libcurl4-gnutls-dev librtmp-dev openssl \\ libxml2-dev libssl-dev fonts-font-awesome \\ gcc gcc-dev","title":"Ubuntu Packages"},{"location":"vpn/","text":"VPN Warning This section currently describes what one needs to do to set up a VPN connection to connect to the Uni Zurich System. Install anyconnect To use the Uni Zurich VPN we need to install anyconnect from the command line. Install as follows (and get the dependencies along the way): sudo apt-get install network-manager-openconnect sudo apt-get install network-manager-openconnect-gnome Verify anyconnect Install anyconnect --version which yields something like: OpenConnect version v8.02-1build1 Using GnuTLS. Features present: TPMv2, PKCS#11, RSA software token, HOTP software token, TOTP software token, Yubikey OATH, System keys, DTLS, ESP Supported protocols: anyconnect (default), nc, gp Configuring VPN Access The process was: Go to Settings -> Network and click + to add a new VPN. Select Cisco AnyConnect Compatible VPN. Enter a useful name For the gateway enter uzhvpn1.uzh.ch Save it Connecting to the VPN From the Network menu select the new VPN network and enter your UZH shortname and password.","title":"VPN Setup"},{"location":"vpn/#vpn","text":"Warning This section currently describes what one needs to do to set up a VPN connection to connect to the Uni Zurich System.","title":"VPN"},{"location":"vpn/#install-anyconnect","text":"To use the Uni Zurich VPN we need to install anyconnect from the command line. Install as follows (and get the dependencies along the way): sudo apt-get install network-manager-openconnect sudo apt-get install network-manager-openconnect-gnome","title":"Install anyconnect"},{"location":"vpn/#verify-anyconnect-install","text":"anyconnect --version which yields something like: OpenConnect version v8.02-1build1 Using GnuTLS. Features present: TPMv2, PKCS#11, RSA software token, HOTP software token, TOTP software token, Yubikey OATH, System keys, DTLS, ESP Supported protocols: anyconnect (default), nc, gp","title":"Verify anyconnect Install"},{"location":"vpn/#configuring-vpn-access","text":"The process was: Go to Settings -> Network and click + to add a new VPN. Select Cisco AnyConnect Compatible VPN. Enter a useful name For the gateway enter uzhvpn1.uzh.ch Save it","title":"Configuring VPN Access"},{"location":"vpn/#connecting-to-the-vpn","text":"From the Network menu select the new VPN network and enter your UZH shortname and password.","title":"Connecting to the VPN"},{"location":"webscraping/","text":"Web Scraping Using an Automated Browser Install Google Chrome for Debian/Ubuntu by pasting the following and then pressing Return sudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome*.deb sudo apt-get install -f Install xvfb so chrome can run 'headless' by pasting the following and then pressing Return sudo apt-get install xvfb Install Chromedriver by pasting the following and then pressing Return (do check for the latest version and that it matches the version of chrome you have installed on your machine): sudo apt-get install unzip wget -N https://chromedriver.storage.googleapis.com/78.0.3904.105/chromedriver_linux64.zip unzip chromedriver_linux64.zip chmod +x chromedriver sudo mv -f chromedriver /usr/local/share/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver If your install worked, you should get ChromeDriver 7X.0.XXXX.XXX returned if the installation was successful - where the version must match the version of Chrome you have installed. chromedriver --version","title":"Webscraping"},{"location":"webscraping/#web-scraping-using-an-automated-browser","text":"Install Google Chrome for Debian/Ubuntu by pasting the following and then pressing Return sudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome*.deb sudo apt-get install -f Install xvfb so chrome can run 'headless' by pasting the following and then pressing Return sudo apt-get install xvfb Install Chromedriver by pasting the following and then pressing Return (do check for the latest version and that it matches the version of chrome you have installed on your machine): sudo apt-get install unzip wget -N https://chromedriver.storage.googleapis.com/78.0.3904.105/chromedriver_linux64.zip unzip chromedriver_linux64.zip chmod +x chromedriver sudo mv -f chromedriver /usr/local/share/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver If your install worked, you should get ChromeDriver 7X.0.XXXX.XXX returned if the installation was successful - where the version must match the version of Chrome you have installed. chromedriver --version","title":"Web Scraping Using an Automated Browser"}]}